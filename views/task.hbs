<div>
  <div class="row">
    <div class="col-md-8">
      <textarea id="code-screen"></textarea>
    </div>
    <div class="col-md-4" id="chatbox">
      <div class="panel panel-primary">
        <div class="panel-heading">
          CHAT ROOM
          <span class="pull-right" id="chatbox-username">
            {{#if user}}
              {{user.name}}
            {{/if}}
          </span>
        </div>
        <div class="panel-body">
          <ul class="media-list" style="heigh: 300px; overflow-y: scroll" id="chatbox-listMessages">

          </ul>
        </div>
        <div class="panel-footer">
          <div class="input-group">
            <input type="text" class="form-control" placeholder="Enter message" id="userMessage"/>
            <span class="input-group-btn">
              <button type="button" class="btn btn-primary" onclick="sendMessage()">SEND</button>
            </span>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>
<input type="hidden" value="{{roomId}}" id="roomId">
<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.30.0/codemirror.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.30.0/mode/javascript/javascript.min.js"></script>
<script src="/plugins/ot/ot.js"></script>
<script src="/socket.io/socket.io.js"></script>
<script>

  var EditorClient = ot.EditorClient;
  var SocketIOAdapter = ot.SocketIOAdapter;
  var CodeMirrorAdapter = ot.CodeMirrorAdapter;

  var socket = io.connect('http://localhost:3000');
  var editor = CodeMirror.fromTextArea(document.getElementById("code-screen"), {
    lineNumbers: true,
    theme: "monokai"
  });

  var cmClient;
  //create new init function and passed the function to the socket.
  function init(str, revision, clients, serverAdapter) {
    editor.setValue(str);
    cmClient = window.cmClient = new EditorClient(
      revision, clients, serverAdapter, new CodeMirrorAdapter(editor) //got editor from var editor above.
    );
  };
  //doc is another chanel that opens and it Initialize the string 'This is a Markdown heading.. from socket-server.
  socket.on('doc', function(obj) {
    init(obj.str, obj.revision, obj.clients, new SocketIOAdapter(socket));
  });

  // get username from chatbox-username, if it doesnt have any values(means user is not login and they are as guests), then create a random number for user id with Math.random
  var username = $('#chatbox-username').val();
  if (username === "") {
    var userId = Math.floor(Math.random() * 9999).toString();
    username = "User" + userId;
    $("#chatbox-username").text(username); //show that as username in chatbox-username
  }
  //go to element #roomId which comes from <input type="hidden" value="{{roomId}}" id="roomId"> and .val return the value value="{{roomId}}" to get the roomId
  var roomId = $('#roomId').val();
  socket.emit('joinRoom', {room: roomId, username: username});

  // once there is a name and text, it just creates the username along with the content in the message box.
  var userMessage = function(name, text) {
    return ('<li class="media"> <div class="media-body"> <div class="media">' + '<div class="media-body"/>' + '<b>' + name + '</b> : ' + text + '<hr/></div></div></div></li>');
  };

  // creates the userMessage by adding the message and username to the chatMessage socket, after that the userMessage gets empty.
  var sendMessage = function() {
    var userMessage = $('#userMessage').val();
    socket.emit('chatMessage', {message: userMessage, username: username});
    $('#userMessage').val("");
  };

  // open socket for chatMessage and the chatbox-listMessages is going to append a mew message everytime someone type a message in.
  socket.on('chatMessage', function(data) {
    $('#chatbox-listMessages').append(userMessage(data.username, data.message));
  });

</script>
